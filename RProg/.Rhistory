?matrix
a <- matrix(c(1, 2, 3, 4))
a
a <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
a
solve(a)
a1 <- solve(a)
a1 %*% a
b <- makeCacheMatrix(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invert <- NULL
set <- function(y) {
x <<- y
invert <<- NULL
}
get <- function() x
setinvert <- function(solve) invert <<- solve
getinvert <- function() invert
list(set = set, get = get,
setinvert = setinvert,
getinvert = getinvert)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
invert <- x$getinvert()
if(!is.null(invert)){
message("Getting cached data")
return(invert)
}
data <- x$get()
invert <- solve(data, ...)
x$setinvert(invert)
invert
## Return a matrix that is the inverse of 'x'
}
b <- makeCacheMatrix(a)
b$get()
b$invert()
b
b$invert()
cacheSolve(b)
b$getinvert()
cacheSolve(b)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invert <- NULL
set <- function(y){
x <<- y
invert <<- NULL
}
get <- function()x
setinvert <- function(solve) invert <<- solve
getinvert <- function()invert
list(set = set, get = get,
setinvert = setinvert,
getinvert = getinvert)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
invert <- x$getinvert()
if(!is.null(invert)){
message("Getting cached data")
return(invert)
}
data <- x$get()
invert <- solve(data, ...)
x$setinvert(invert)
invert
## Return a matrix that is the inverse of 'x'
}
b <- makeCacheMatrix(a)
b$get()
b$invert()
cacheSolve(b)
b$invert()
b$invert
b$getinvert()
b <- makeCacheMatrix(matrix(c(10, 20, 30, 40), nrow = 2, ncol = 2))
b$get
b$get()
b$invert
b$getinvert()
cacheSolve(b)
b$get
b$get()
b$invert
b$getinvert()
cacheSolve(b)
cacheSolve(b)
b$getinvert()
b$invert
b$get()
c <- b$getinvert()
b %*% c
c
b
d <- b$get()
c %*% d
d %*% c
b <- makeCacheMatrix(a)
b
b$get()
b$getinvert()
b
class(b)
z <- cacheSolve(b)
class(b)
class(z)
z
b%*%z
b$get() %*% z
## Following functions cache the matrix invert
## Produce a list of 4 methods: set - set the matrix, get - return the matrix,
## setinvert - set invert of the matrix, getinvert - return the invert
makeCacheMatrix <- function(x = matrix()) {
## (matrix) -> list of methods
##
## > b <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
## > b$get()
##      [,1] [,2]
## [1,]    1    3
## [2,]    2    4
invert <- NULL
set <- function(y){
x <<- y
invert <<- NULL
}
get <- function() x
setinvert <- function(solve) invert <<- solve
getinvert <- function() invert
list(set = set, get = get,
setinvert = setinvert,
getinvert = getinvert)
}
## Calculate invert of the matrix, if it's the first time run
## Otherwise return invert stored in cache
cacheSolve <- function(x, ...) {
## (list of methods) -> matrix
##
## > b <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
## c <- cacheSolve(b)
## > c
##      [,1] [,2]
## [1,]   -2  1.5
## [2,]    1 -0.5
##
## > b$get() %*% z
##      [,1] [,2]
## [1,]    1    0
## [2,]    0    1
##
## Hooray, everything works. Now you can go on a drinking spree ^_^
invert <- x$getinvert()
if(!is.null(invert)){
message("Getting cached data")
return(invert)
}
data <- x$get()
invert <- solve(data, ...)
x$setinvert(invert)
invert
}
a
a1
makeCacheMatrix(a1)
a <- makeCacheMatrix(a1)
a$get
a$get()
a$invert
a$getinvert()
b <- cachsSolve(a)
b <- cacheSolve(a)
b
b$get()
a %*% b
a1 %*% b
a$get %*% b
a$get() %*% b
## > b$get() %*% c
